{"version":3,"sources":["components/Landing.js","components/Resume.js","components/Projects.js","components/Art.js","components/Contact.js","components/main.js","components/AppHeader.js","App.js","serviceWorker.js","index.js"],"names":["Landing","className","col","shadow","style","width","color","height","background","border","to","colored","Component","Resume","Projects","Art","Contact","Main","exact","path","component","AppHeader","title","scroll","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8NAqDeA,E,uKA9CP,OACI,6BACI,kBAAC,OAAD,CAAMC,UAAU,mBACZ,kBAAC,OAAD,CAAMC,IAAK,GACP,kBAAC,OAAD,CAAMC,OAAQ,EAAGF,UAAU,cAAcG,MAAO,CAACC,MAAO,SACpD,kBAAC,YAAD,CAAWD,MAAO,CAACE,MAAO,OAAQC,OAAQ,QAASC,WAAY,2EAA/D,UACA,kBAAC,WAAD,wHAIA,kBAAC,cAAD,CAAaC,QAAM,GACf,kBAAC,IAAD,CAAMC,GAAG,WAAU,kBAAC,SAAD,CAAQC,SAAO,GAAf,sBAI/B,kBAAC,OAAD,CAAMT,IAAK,GACP,kBAAC,OAAD,CAAMC,OAAQ,EAAGF,UAAU,eACvB,kBAAC,YAAD,CAAWG,MAAO,CAACE,MAAO,OAAQC,OAAQ,QAASC,WAAY,2EAA/D,YACA,kBAAC,WAAD,sOAKA,kBAAC,cAAD,CAAaC,QAAM,GACf,kBAAC,SAAD,CAAQE,SAAO,GAAf,uBAIZ,kBAAC,OAAD,CAAMT,IAAK,GACP,kBAAC,OAAD,CAAMC,OAAQ,EAAGF,UAAU,eACvB,kBAAC,YAAD,CAAWG,MAAO,CAACE,MAAO,OAAQC,OAAQ,QAASC,WAAY,2EAA/D,OACA,kBAAC,WAAD,wHAIA,kBAAC,cAAD,CAAaC,QAAM,GACf,kBAAC,SAAD,CAAQE,SAAO,GAAf,0B,GAtCVC,aCKPC,E,uKANP,OACI,2C,GAHSD,aCQNE,E,uKANP,OACI,6C,GAHWF,aCQRG,E,uKANP,OACI,wC,GAHMH,aCQHI,E,uKANP,OACI,4C,GAHUJ,aCiBPK,EAVF,kBACT,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,aAAaC,UAAWpB,IAC1C,kBAAC,IAAD,CAAOkB,OAAK,EAACC,KAAK,UAAUC,UAAWP,IACvC,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,YAAYC,UAAWN,IACzC,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,OAAOC,UAAWL,IACpC,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,WAAWC,UAAWJ,MCOjCK,E,uKAfP,OACI,6BACI,kBAAC,SAAD,CAAQpB,UAAU,SAASqB,MAAM,4BAA4BC,QAAM,GAC/D,kBAAC,aAAD,KACI,kBAAC,IAAD,CAAMb,GAAG,WAAT,UACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,QAAT,OACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,kB,GATAE,aCcTY,E,uKAXX,OACE,kBAAC,SAAD,KACE,kBAAC,EAAD,MACA,kBAAC,UAAD,CAASvB,UAAU,WACjB,kBAAC,EAAD,Y,GANQW,aCMEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,cCTNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.bbbd8fa3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Grid, Cell, Card, CardTitle, CardText, CardActions, CardMenu, IconButton, Button } from 'react-mdl';\nimport './components.css';\nimport { Link } from 'react-router-dom';\n\nclass Landing extends Component {\n    render() {\n        return(\n            <div>\n                <Grid className=\"demo-grid-ruler\">\n                    <Cell col={4}>\n                        <Card shadow={1} className=\"landingCard\" style={{width: '100%'}}>\n                            <CardTitle style={{color: '#fff', height: '200px', background: 'url(http://www.getmdl.io/assets/demos/welcome_card.jpg) center / cover'}}>Resume</CardTitle>\n                            <CardText>\n                                Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                                Mauris sagittis pellentesque lacus eleifend lacinia...\n                            </CardText>\n                            <CardActions border>\n                                <Link to=\"/resume\"><Button colored>Get to Know Me</Button></Link>\n                            </CardActions>\n                        </Card>\n                    </Cell>\n                    <Cell col={4}>\n                        <Card shadow={1} className=\"landingCard\">\n                            <CardTitle style={{color: '#fff', height: '200px', background: 'url(http://www.getmdl.io/assets/demos/welcome_card.jpg) center / cover'}}>Projects</CardTitle>\n                            <CardText>\n                                Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                                Mauris sagittis pellentesque lacus eleifend lacinia...orem ipsum dolor sit amet, consectetur adipiscing elit.\n                                Mauris sagittis pellentesque lacus eleifend lacinia...\n                            </CardText>\n                            <CardActions border>\n                                <Button colored>View my Projects</Button>\n                            </CardActions>\n                        </Card>\n                    </Cell>\n                    <Cell col={4}>\n                        <Card shadow={1} className=\"landingCard\">\n                            <CardTitle style={{color: '#fff', height: '200px', background: 'url(http://www.getmdl.io/assets/demos/welcome_card.jpg) center / cover'}}>Art</CardTitle>\n                            <CardText>\n                                Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n                                Mauris sagittis pellentesque lacus eleifend lacinia...\n                            </CardText>\n                            <CardActions border>\n                                <Button colored>Browse my Art</Button>\n                            </CardActions>\n                        </Card>\n                    </Cell>\n                </Grid>\n            </div>\n        )\n    }\n}\n\nexport default Landing;","import React, { Component } from 'react';\n\nclass Resume extends Component {\n    render() {\n        return(\n            <div>Resume</div>\n        )\n    }\n}\n\nexport default Resume;","import React, { Component } from 'react';\n\nclass Projects extends Component {\n    render() {\n        return(\n            <div>Projects</div>\n        )\n    }\n}\n\nexport default Projects;","import React, { Component } from 'react';\n\nclass Art extends Component {\n    render() {\n        return(\n            <div>Art</div>\n        )\n    }\n}\n\nexport default Art;","import React, { Component } from 'react';\n\nclass Contact extends Component {\n    render() {\n        return(\n            <div>Contact</div>\n        )\n    }\n}\n\nexport default Contact;","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Landing from './Landing';\nimport Resume from './Resume';\nimport Projects from './Projects';\nimport Art from './Art';\nimport Contact from './Contact';\n\nconst Main = () => (\n    <Switch>\n        <Route exact path=\"/portfolio\" component={Landing} />\n        <Route exact path=\"/resume\" component={Resume} />\n        <Route exact path=\"/projects\" component={Projects} />\n        <Route exact path=\"/art\" component={Art} />\n        <Route exact path=\"/contact\" component={Contact} />\n    </Switch>\n)\n\nexport default Main;","import React, { Component } from 'react';\nimport { Header, Navigation } from 'react-mdl';\nimport { Link } from 'react-router-dom';\nimport './components.css';\n\nclass AppHeader extends Component {\n    render() {\n        return(\n            <div>\n                <Header className=\"navbar\" title=\"Keira Colstrom-Skenandore\" scroll>\n                    <Navigation>\n                        <Link to=\"/resume\">Resume</Link>\n                        <Link to=\"/projects\">Projects</Link>\n                        <Link to=\"/art\">Art</Link>\n                        <Link to=\"/contact\">Contact</Link>\n                    </Navigation>\n                </Header>\n            </div>\n        )\n    }\n}\n\nexport default AppHeader;","import React, { Component } from 'react';\nimport './App.css';\nimport Main from './components/main';\nimport { Layout, Content } from 'react-mdl';\nimport AppHeader from './components/AppHeader';\n\nclass App extends Component {\n  render() {\n    return (\n      <Layout>\n        <AppHeader></AppHeader>\n        <Content className=\"wrapper\">\n          <Main/>\n        </Content>\n      </Layout>\n    );\n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}